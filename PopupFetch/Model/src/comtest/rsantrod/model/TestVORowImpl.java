package comtest.rsantrod.model;

import comtest.rsantrod.model.common.TestVORow;

import java.math.BigDecimal;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 02 10:37:16 CEST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TestVORowImpl extends ViewRowImpl implements TestVORow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ViewAttr {
            public Object get(TestVORowImpl obj) {
                return obj.getViewAttr();
            }

            public void put(TestVORowImpl obj, Object value) {
                obj.setViewAttr((BigDecimal)value);
            }
        }
        ,
        ViewAttr1 {
            public Object get(TestVORowImpl obj) {
                return obj.getViewAttr1();
            }

            public void put(TestVORowImpl obj, Object value) {
                obj.setViewAttr1((String)value);
            }
        }
        ,
        ViewAttr2 {
            public Object get(TestVORowImpl obj) {
                return obj.getViewAttr2();
            }

            public void put(TestVORowImpl obj, Object value) {
                obj.setViewAttr2((String)value);
            }
        }
        ,
        ViewAttr3 {
            public Object get(TestVORowImpl obj) {
                return obj.getViewAttr3();
            }

            public void put(TestVORowImpl obj, Object value) {
                obj.setViewAttr3((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(TestVORowImpl object);

        public abstract void put(TestVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int VIEWATTR = AttributesEnum.ViewAttr.index();
    public static final int VIEWATTR1 = AttributesEnum.ViewAttr1.index();
    public static final int VIEWATTR2 = AttributesEnum.ViewAttr2.index();
    public static final int VIEWATTR3 = AttributesEnum.ViewAttr3.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TestVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute ViewAttr.
     * @return the ViewAttr
     */
    public BigDecimal getViewAttr() {
        return (BigDecimal) getAttributeInternal(VIEWATTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ViewAttr.
     * @param value value to set the  ViewAttr
     */
    public void setViewAttr(BigDecimal value) {
        setAttributeInternal(VIEWATTR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ViewAttr1.
     * @return the ViewAttr1
     */
    public String getViewAttr1() {
        return (String) getAttributeInternal(VIEWATTR1);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ViewAttr1.
     * @param value value to set the  ViewAttr1
     */
    public void setViewAttr1(String value) {
        setAttributeInternal(VIEWATTR1, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ViewAttr2.
     * @return the ViewAttr2
     */
    public String getViewAttr2() {
        return (String) getAttributeInternal(VIEWATTR2);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ViewAttr2.
     * @param value value to set the  ViewAttr2
     */
    public void setViewAttr2(String value) {
        setAttributeInternal(VIEWATTR2, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ViewAttr3.
     * @return the ViewAttr3
     */
    public String getViewAttr3() {
        return (String) getAttributeInternal(VIEWATTR3);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ViewAttr3.
     * @param value value to set the  ViewAttr3
     */
    public void setViewAttr3(String value) {
        setAttributeInternal(VIEWATTR3, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
